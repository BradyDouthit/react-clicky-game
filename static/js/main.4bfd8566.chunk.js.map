{"version":3,"sources":["components/MyHeader/MyHeader.js","components/ClickImage/ClickImage.js","App.js","serviceWorker.js","index.js"],"names":["MyHeader","props","className","score","ClickImage","id","key","this","src","imageURL","alt","onClick","handleClick","React","Component","arrayShuffle","require","App","state","images","hasBeenClicked","console","log","setState","length","alert","includes","clickArray","push","map","image","hasLost","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"u3EAceA,MAVf,SAAkBC,GACd,OACI,yBAAKC,UAAU,YACX,2CACA,4FACA,wBAAIA,UAAU,gBAAd,UAAqCD,EAAME,SCaxCC,G,uLAhBD,IAAD,OACL,OAEI,yBAAKC,GAAG,kBAAkBC,IAAKC,KAAKN,MAAMI,IACtC,yBACAH,UAAU,cACVM,IAAKD,KAAKN,MAAMQ,SAAUC,IAAKH,KAAKN,MAAMS,IAC1CJ,IAAKC,KAAKN,MAAMI,GAChBM,QAAS,kBAAM,EAAKV,MAAMW,YAAY,EAAKX,MAAMI,Y,GAVxCQ,IAAMC,YCMzBC,EAAeC,EAAQ,IA2DdC,E,2MAtDbC,MAAQ,CACNC,OAAQA,EACRhB,MAAO,EACPiB,eAAgB,I,EAGlBR,YAAc,SAACP,GAIb,GAHAgB,QAAQC,IAAIjB,GACZ,EAAKkB,SAAS,CAAEJ,OAAQJ,EAAa,EAAKG,MAAMC,UAE5C,EAAKD,MAAMf,QAAUgB,EAAOK,OAAS,EACvCC,MAAM,gBAEH,GAAK,EAAKP,MAAME,eAAeM,SAASrB,GAQpC,EAAKa,MAAME,eAAeM,SAASrB,KAC1C,EAAKkB,SAAS,CAAEH,eAAgB,GAAIjB,MAAO,IAC3CsB,MAAM,kBAV0C,CAEhD,IAAIE,EAAa,EAAKT,MAAME,eAC5BO,EAAWC,KAAKvB,GAEhB,EAAKkB,SAAS,CAAEH,eAAgBO,EAAYxB,MAAO,EAAKe,MAAMf,MAAQ,IACtEkB,QAAQC,IAAI,EAAKJ,MAAME,kB,wEAWjB,IAAD,OACP,OAEE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,CAAUC,MAAOI,KAAKW,MAAMf,QAC5B,yBAAKD,UAAU,aACZK,KAAKW,MAAMC,OAAOU,KAAI,SAAAC,GAAK,OAC1B,kBAAC,EAAD,CACEpB,IAAKoB,EAAMpB,IACXL,GAAIyB,EAAMzB,GACVC,IAAKwB,EAAMzB,GACXI,SAAUqB,EAAMrB,SAChBsB,QAAS,EAAKb,MAAMa,QACpBX,eAAgB,EAAKF,MAAME,eAC3BR,YAAa,EAAKA,YAClBT,MAAO,EAAKe,MAAMf,iB,GA/CdU,IAAMC,WCDJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4bfd8566.chunk.js","sourcesContent":["import React from 'react';\n\nimport './MyHeader.css'\n\nfunction MyHeader(props) {\n    return (\n        <div className=\"MyHeader\">\n            <h1>Clicky Game</h1>\n            <p>The goal of this game is to never click the same block twice!</p>\n            <h2 className=\"header-score\">Score: {props.score}</h2>\n        </div>\n    )\n}\n\nexport default MyHeader;","import React from 'react';\n\nimport './ClickImage.css';\n\nclass ClickImage extends React.Component {\n    \n    render() {\n        return (\n        \n            <div id=\"click-image-div\" key={this.props.id}>\n                <img \n                className=\"click-image\" \n                src={this.props.imageURL} alt={this.props.alt} \n                key={this.props.id} \n                onClick={() => this.props.handleClick(this.props.id)}\n                >\n                </img>\n            </div>\n        );\n    }\n};\n\nexport default ClickImage;","import React from 'react';\n\nimport './App.css';\n\nimport images from './components/ClickImage/images.json';\n\nimport MyHeader from './components/MyHeader/MyHeader.js';\n\nimport ClickImage from './components/ClickImage/ClickImage';\n\nconst arrayShuffle = require('array-shuffle')\n\n\nclass App extends React.Component {\n\n  state = {\n    images: images,\n    score: 0,\n    hasBeenClicked: []\n  };\n\n  handleClick = (id) => {\n    console.log(id)\n    this.setState({ images: arrayShuffle(this.state.images) });\n\n    if (this.state.score === images.length - 1) {\n      alert('You win')\n    }\n    else if (!this.state.hasBeenClicked.includes(id)) {\n\n      let clickArray = this.state.hasBeenClicked;\n      clickArray.push(id);\n\n      this.setState({ hasBeenClicked: clickArray, score: this.state.score + 1 })\n      console.log(this.state.hasBeenClicked)\n    }\n    else if (this.state.hasBeenClicked.includes(id)) {\n      this.setState({ hasBeenClicked: [], score: 0 });\n      alert(\"You lost!\")\n    }\n\n\n\n  };\n\n  render() {\n    return (\n\n      <div className=\"App\">\n        <MyHeader score={this.state.score} />\n        <div className=\"container\">\n          {this.state.images.map(image =>\n            <ClickImage\n              alt={image.alt}\n              id={image.id}\n              key={image.id}\n              imageURL={image.imageURL}\n              hasLost={this.state.hasLost}\n              hasBeenClicked={this.state.hasBeenClicked}\n              handleClick={this.handleClick}\n              score={this.state.score}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}